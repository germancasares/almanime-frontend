import { describe, expect, test } from "vitest";
import { Info } from "../SSASubtitle";

import scriptInfoSerializer from "./info";

describe("scriptInfoSerializer", () => {
  test("works with empty object", () => {
    const info = {} as Info;

    const infoString = scriptInfoSerializer(info);

    expect(infoString).toEqual(`[Script Info]
; Subtitle generated by AlmAnime
ScriptType: undefined
Title: undefined
Collisions: undefined
PlayResY: undefined
PlayResX: undefined
WrapStyle: undefined
`);
  });

  test("works with an info with data", () => {
    const info = {
      ScriptType: "Test",
      Title: "Test",
      Collisions: "Test",
      PlayResX: 10,
      PlayResY: 10,
      WrapStyle: 1,
      "Last Style Storage": "Test",
      ScaledBorderAndShadow: "Test",
      "Video Aspect Ratio": 10,
      "Video File": "Test",
      "Video Position": 10,
      "Video Zoom": 10,
    } as Info;

    const infoString = scriptInfoSerializer(info);

    expect(infoString).toEqual(`[Script Info]
; Subtitle generated by AlmAnime
ScriptType: Test
Title: Test
Collisions: Test
PlayResY: 10
PlayResX: 10
WrapStyle: 1
; The following fields are not specified in the specs, but here they are
Last Style Storage: Test
ScaledBorderAndShadow: Test
Video Aspect Ratio: 10
Video File: Test
Video Position: 10
Video Zoom: 10
`);
  });

  test("only serializes the fields with data", () => {
    const info = {
      ScriptType: "Test",
      Title: "Test",
      Collisions: "Test",
      PlayResX: 10,
      PlayResY: 10,
      WrapStyle: 1,
      "Last Style Storage": "Test",
      ScaledBorderAndShadow: "Test",
      "Video Position": 10,
    } as Info;

    const infoString = scriptInfoSerializer(info);

    expect(infoString).toEqual(`[Script Info]
; Subtitle generated by AlmAnime
ScriptType: Test
Title: Test
Collisions: Test
PlayResY: 10
PlayResX: 10
WrapStyle: 1
; The following fields are not specified in the specs, but here they are
Last Style Storage: Test
ScaledBorderAndShadow: Test
Video Position: 10
`);
  });

  test("is serialized by HEADER order and additonal fields alphabetically", () => {
    const info = {
      PlayResX: 10,
      "Video Position": 10,
      PlayResY: 10,
      ScaledBorderAndShadow: "Test",
      Title: "Test",
      Collisions: "Test",
      "Last Style Storage": "Test",
      WrapStyle: 1,
      ScriptType: "Test",
    } as Info;

    const infoString = scriptInfoSerializer(info);

    expect(infoString).toEqual(`[Script Info]
; Subtitle generated by AlmAnime
ScriptType: Test
Title: Test
Collisions: Test
PlayResY: 10
PlayResX: 10
WrapStyle: 1
; The following fields are not specified in the specs, but here they are
Last Style Storage: Test
ScaledBorderAndShadow: Test
Video Position: 10
`);
  });
});
